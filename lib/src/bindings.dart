// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to call DrLibphonenumber functions
class DrLibphonenumberBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DrLibphonenumberBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DrLibphonenumberBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> format(
    ffi.Pointer<ffi.Int8> phoneNumber,
    ffi.Pointer<ffi.Int8> isoCode,
    int phoneNumberFormat,
  ) {
    return _format(
      phoneNumber,
      isoCode,
      phoneNumberFormat,
    );
  }

  late final _format_ptr = _lookup<ffi.NativeFunction<_c_format>>('format');
  late final _dart_format _format = _format_ptr.asFunction<_dart_format>();

  int getNumberType(
    ffi.Pointer<ffi.Int8> phoneNumber,
    ffi.Pointer<ffi.Int8> isoCode,
  ) {
    return _getNumberType(
      phoneNumber,
      isoCode,
    );
  }

  late final _getNumberType_ptr =
      _lookup<ffi.NativeFunction<_c_getNumberType>>('getNumberType');
  late final _dart_getNumberType _getNumberType =
      _getNumberType_ptr.asFunction<_dart_getNumberType>();

  void free_c_char(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _free_c_char(
      str,
    );
  }

  late final _free_c_char_ptr =
      _lookup<ffi.NativeFunction<_c_free_c_char>>('free_c_char');
  late final _dart_free_c_char _free_c_char =
      _free_c_char_ptr.asFunction<_dart_free_c_char>();
}

abstract class PhoneNumberFormat {
  /// E.164 formatting, no spaces, no decorations.
  static const int E164 = 0;

  /// International formatting, contains country code and country dependent
  /// formatting.
  static const int International = 1;

  /// National formatting, no country code and country dependent formatting.
  static const int National = 2;

  /// RFC3966 formatting, see the RFC.
  static const int Rfc3966 = 3;
}

abstract class PhoneNumberType {
  ///
  static const int FixedLine = 0;

  ///
  static const int Mobile = 1;

  /// In some regions (e.g. the USA), it is impossible to distinguish between
  /// fixed-line and mobile numbers by looking at the phone number itself.
  static const int FixedLineOrMobile = 2;

  /// Freephone lines.
  static const int TollFree = 3;

  ///
  static const int PremiumRate = 4;

  /// The cost of this call is shared between the caller and the recipient, and
  /// is hence typically less than PREMIUM_RATE calls. See
  /// http://en.wikipedia.org/wiki/Shared_Cost_Service for more information.
  static const int SharedCost = 5;

  /// A personal number is associated with a particular person, and may be
  /// routed to either a MOBILE or FIXED_LINE number. Some more information can
  /// be found here: http://en.wikipedia.org/wiki/Personal_Numbers
  static const int PersonalNumber = 6;

  /// Voice over IP numbers. This includes TSoIP (Telephony Service over IP).
  static const int Voip = 7;

  ///
  static const int Pager = 8;

  /// Used for "Universal Access Numbers" or "Company Numbers". They may be
  /// further routed to specific offices, but allow one number to be used for a
  /// company.
  static const int Uan = 9;

  ///
  static const int Emergency = 10;

  /// Used for "Voice Mail Access Numbers".
  static const int Voicemail = 11;

  ///
  static const int ShortCode = 12;

  ///
  static const int StandardRate = 13;

  ///
  static const int Carrier = 14;

  ///
  static const int NoInternational = 15;

  /// A phone number is of type UNKNOWN when it does not fit any of the known
  /// patterns for a specific region.
  static const int Unknown = 16;
}

typedef _c_format = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> phoneNumber,
  ffi.Pointer<ffi.Int8> isoCode,
  ffi.Int32 phoneNumberFormat,
);

typedef _dart_format = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> phoneNumber,
  ffi.Pointer<ffi.Int8> isoCode,
  int phoneNumberFormat,
);

typedef _c_getNumberType = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> phoneNumber,
  ffi.Pointer<ffi.Int8> isoCode,
);

typedef _dart_getNumberType = int Function(
  ffi.Pointer<ffi.Int8> phoneNumber,
  ffi.Pointer<ffi.Int8> isoCode,
);

typedef _c_free_c_char = ffi.Void Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_free_c_char = void Function(
  ffi.Pointer<ffi.Int8> str,
);
